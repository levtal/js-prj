The git process   'https://help.github.com/articles/create-a-repo/'
------------------------

1:  At  the  'https://github.com/username'   press the '+' (Upper-right corner of any page, click , and then click New repository.) and   choose:   'Create a new repository'.
2:  choose 'Repository name'.
3:  Choose creating a public  repository. 
4:  Select Initialize this repository with a README
5:  Click Create repository. 



How commit a change to the README file.
 -------------------------------------------
 1: In your repository's list of files, click README.md.
 2: Above the file's content, click 'the pencil tag' 
 3: On the Edit file tab , type some information about yourself.

 4: Above the new content, click Preview changes.

 5: At the bottom of the page, type a short, meaningful commit message  	

 6: Below the commit message fields, decide whether to add your commit to the current branch or to a new branch. If your current branch is master, you should choose to create a new branch for your commit and then create a pull request.

 7:Click Propose file change.

 

 Git in local  computer
--------------------------------------
 1: In the  project dir run 'git  init'

  
2: Type  'git add .' to add all the files  .
3: Type  'git commit -m "Fix such and such"'
 


Push an existing repository
---------------

1: git remote add origin https://github.com/username/new_repo.git
2: git remote -v
3: git push -u origin master
      you need to print user name  and passward

if the next message appears:
     ! [rejected]        master -> master (non-fast-forward)
     error: failed to push some refs to 'https://github.com//username/new_repo'
     hint: Updates were rejected because the tip of your current branch is behind
     hint: its remote counterpart. Integrate the remote changes (e.g.
     hint: 'git pull ...') before pushing again.

you shold  run :
     git pull origin master   and after that run   git push -u origin master


changing  remote
------------------
 git remote set-url origin https://github.com/USERNAME/PRJECT_NAME.git

	 
dos commands	 
	 show hidden file in cmd  'dir /ah'
	 delete non empty dir  rmdir   /s  'dir name'
	 
Fork A Repo
-----------------



A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.

Most commonly, forks are used to:
 1 Changes to someone else's project 
 2 Use someone else's project as a starting point for your own idea.

 
 
 
Fork process
-------------
     1  On GitHub, navigate to the  repository.
     2  In the top-right corner of the page, click Fork.
     //Create a local clone of your fork
     3 On GitHub, navigate to your fork of the  repository
     4 Under your repository name, click Clone or download.
     5 In the Clone with HTTPs section, click icon with arrow to copy the clone URL for the repository.
     6  open terminl 
     7 Type git clone, and then paste the URL you copied in Step 5. 
       It will look like this:



         
         git clone   https://github.com/heroku/node-js-getting-started.git

         cd node-js-getting-started
 
more in https://help.github.com/articles/fork-a-repo/

npm
-------
1 npm init 
    after the above command there will few qustions 
	name(server):
	version:
	description:
	entry point(index.js): empty
	test commant: empty
	git repository :empty
	keywords:
  
 this command will create 'package.json'  file.  
 
 
 
 
 Getting Started on Heroku with Node.js
 ---------------------------------------
 https://devcenter.heroku.com/articles/getting-started-with-nodejs
 
 Create an app on Heroku, which prepares Heroku to receive
 your source code:

   heroku create
   
   git push heroku master
  

 heroku ps:scale web=1  # Ensure  at least one instance of app running:
      
 Now visit the app at the URL generated by its app name

 #  heroku open. As a handy shortcut, you can open the website  
 
 heroku logs --tail #view log
 #Press Control+C to stop streaming the logs.
 # Procfile,is a text file in the root directory of your 
 # application, to explicitly declare what command should be 
 # executed to start your app.

# The Procfile in the example app you deployed looks like this:

#   web: node index.js


# Right now, your app is running on a single web dyno. 
# Think of a dyno as a lightweight container that runs the
# command specified in the Procfile.

# You can check how many dynos are running using the ps command:

 #     heroku ps
 
 
 # Scaling an application on Heroku is equivalent to changing 
 #the number of dynos that are running. 
 #Scale the number of web dynos to zero:

# heroku ps:scale web=0

# Access the app again by hitting refresh on the web tab, or heroku 
 #open to open it in a web tab. You will get an error message 
 #because you no longer have any web dynos available to serve requests.

#Scale it up again:

# heroku ps:scale web=1

#For abuse prevention, scaling a non-free application to more than one dyno requires account verification.

npm install #  install the dependencies, 
#preparing your system for running the app locally:

heroku local web#  run pplication locally in http://localhost:5000/

     
npm install --save --save-exact cool-ascii-faces # adding a dependency for cool-ascii-faces
             # in package.json
			 
# Modify index.js so that it requires this module at the start. 
var cool = require('cool-ascii-faces');
# Also add a new route (/cool) that uses it.
app.get('/cool', function(request, response) {
  response.send(cool());
});

#Now test locally:

 npm install

 heroku local
 
 
 
 Now deploy. Almost every deploy to Heroku follows this same pattern. First, add the modified files to the local git repository:

 git add .

Now commit the changes to the repository:

 git commit -m "Demo"

Now deploy, just as you did previously:

 git push heroku master

Finally, check that everything is working:

 heroku open cool

You should see another face.



####
heroku run node

	 
https://devcenter.heroku.com/articles/getting-started-with-nodejs#push-local-changes



     

